
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `MedicationSchedule` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MedicationSchedule
 * 
 */
export type MedicationScheduleModel = runtime.Types.Result.DefaultSelection<Prisma.$MedicationSchedulePayload>

export type AggregateMedicationSchedule = {
  _count: MedicationScheduleCountAggregateOutputType | null
  _min: MedicationScheduleMinAggregateOutputType | null
  _max: MedicationScheduleMaxAggregateOutputType | null
}

export type MedicationScheduleMinAggregateOutputType = {
  id: string | null
  dateTime: Date | null
  status: $Enums.ScheduleStatus | null
  medicationId: string | null
}

export type MedicationScheduleMaxAggregateOutputType = {
  id: string | null
  dateTime: Date | null
  status: $Enums.ScheduleStatus | null
  medicationId: string | null
}

export type MedicationScheduleCountAggregateOutputType = {
  id: number
  dateTime: number
  status: number
  medicationId: number
  _all: number
}


export type MedicationScheduleMinAggregateInputType = {
  id?: true
  dateTime?: true
  status?: true
  medicationId?: true
}

export type MedicationScheduleMaxAggregateInputType = {
  id?: true
  dateTime?: true
  status?: true
  medicationId?: true
}

export type MedicationScheduleCountAggregateInputType = {
  id?: true
  dateTime?: true
  status?: true
  medicationId?: true
  _all?: true
}

export type MedicationScheduleAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MedicationSchedule to aggregate.
   */
  where?: Prisma.MedicationScheduleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MedicationSchedules to fetch.
   */
  orderBy?: Prisma.MedicationScheduleOrderByWithRelationInput | Prisma.MedicationScheduleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MedicationScheduleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MedicationSchedules from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MedicationSchedules.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MedicationSchedules
  **/
  _count?: true | MedicationScheduleCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MedicationScheduleMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MedicationScheduleMaxAggregateInputType
}

export type GetMedicationScheduleAggregateType<T extends MedicationScheduleAggregateArgs> = {
      [P in keyof T & keyof AggregateMedicationSchedule]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMedicationSchedule[P]>
    : Prisma.GetScalarType<T[P], AggregateMedicationSchedule[P]>
}




export type MedicationScheduleGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MedicationScheduleWhereInput
  orderBy?: Prisma.MedicationScheduleOrderByWithAggregationInput | Prisma.MedicationScheduleOrderByWithAggregationInput[]
  by: Prisma.MedicationScheduleScalarFieldEnum[] | Prisma.MedicationScheduleScalarFieldEnum
  having?: Prisma.MedicationScheduleScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MedicationScheduleCountAggregateInputType | true
  _min?: MedicationScheduleMinAggregateInputType
  _max?: MedicationScheduleMaxAggregateInputType
}

export type MedicationScheduleGroupByOutputType = {
  id: string
  dateTime: Date
  status: $Enums.ScheduleStatus
  medicationId: string
  _count: MedicationScheduleCountAggregateOutputType | null
  _min: MedicationScheduleMinAggregateOutputType | null
  _max: MedicationScheduleMaxAggregateOutputType | null
}

type GetMedicationScheduleGroupByPayload<T extends MedicationScheduleGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MedicationScheduleGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MedicationScheduleGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MedicationScheduleGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MedicationScheduleGroupByOutputType[P]>
      }
    >
  >



export type MedicationScheduleWhereInput = {
  AND?: Prisma.MedicationScheduleWhereInput | Prisma.MedicationScheduleWhereInput[]
  OR?: Prisma.MedicationScheduleWhereInput[]
  NOT?: Prisma.MedicationScheduleWhereInput | Prisma.MedicationScheduleWhereInput[]
  id?: Prisma.StringFilter<"MedicationSchedule"> | string
  dateTime?: Prisma.DateTimeFilter<"MedicationSchedule"> | Date | string
  status?: Prisma.EnumScheduleStatusFilter<"MedicationSchedule"> | $Enums.ScheduleStatus
  medicationId?: Prisma.StringFilter<"MedicationSchedule"> | string
  medication?: Prisma.XOR<Prisma.MedicationScalarRelationFilter, Prisma.MedicationWhereInput>
}

export type MedicationScheduleOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  dateTime?: Prisma.SortOrder
  status?: Prisma.SortOrder
  medicationId?: Prisma.SortOrder
  medication?: Prisma.MedicationOrderByWithRelationInput
}

export type MedicationScheduleWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.MedicationScheduleWhereInput | Prisma.MedicationScheduleWhereInput[]
  OR?: Prisma.MedicationScheduleWhereInput[]
  NOT?: Prisma.MedicationScheduleWhereInput | Prisma.MedicationScheduleWhereInput[]
  dateTime?: Prisma.DateTimeFilter<"MedicationSchedule"> | Date | string
  status?: Prisma.EnumScheduleStatusFilter<"MedicationSchedule"> | $Enums.ScheduleStatus
  medicationId?: Prisma.StringFilter<"MedicationSchedule"> | string
  medication?: Prisma.XOR<Prisma.MedicationScalarRelationFilter, Prisma.MedicationWhereInput>
}, "id">

export type MedicationScheduleOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  dateTime?: Prisma.SortOrder
  status?: Prisma.SortOrder
  medicationId?: Prisma.SortOrder
  _count?: Prisma.MedicationScheduleCountOrderByAggregateInput
  _max?: Prisma.MedicationScheduleMaxOrderByAggregateInput
  _min?: Prisma.MedicationScheduleMinOrderByAggregateInput
}

export type MedicationScheduleScalarWhereWithAggregatesInput = {
  AND?: Prisma.MedicationScheduleScalarWhereWithAggregatesInput | Prisma.MedicationScheduleScalarWhereWithAggregatesInput[]
  OR?: Prisma.MedicationScheduleScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MedicationScheduleScalarWhereWithAggregatesInput | Prisma.MedicationScheduleScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MedicationSchedule"> | string
  dateTime?: Prisma.DateTimeWithAggregatesFilter<"MedicationSchedule"> | Date | string
  status?: Prisma.EnumScheduleStatusWithAggregatesFilter<"MedicationSchedule"> | $Enums.ScheduleStatus
  medicationId?: Prisma.StringWithAggregatesFilter<"MedicationSchedule"> | string
}

export type MedicationScheduleCreateInput = {
  id?: string
  dateTime: Date | string
  status?: $Enums.ScheduleStatus
  medication: Prisma.MedicationCreateNestedOneWithoutSchedulesInput
}

export type MedicationScheduleUncheckedCreateInput = {
  id?: string
  dateTime: Date | string
  status?: $Enums.ScheduleStatus
  medicationId: string
}

export type MedicationScheduleUpdateInput = {
  dateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumScheduleStatusFieldUpdateOperationsInput | $Enums.ScheduleStatus
  medication?: Prisma.MedicationUpdateOneRequiredWithoutSchedulesNestedInput
}

export type MedicationScheduleUncheckedUpdateInput = {
  dateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumScheduleStatusFieldUpdateOperationsInput | $Enums.ScheduleStatus
  medicationId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MedicationScheduleCreateManyInput = {
  id?: string
  dateTime: Date | string
  status?: $Enums.ScheduleStatus
  medicationId: string
}

export type MedicationScheduleUpdateManyMutationInput = {
  dateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumScheduleStatusFieldUpdateOperationsInput | $Enums.ScheduleStatus
}

export type MedicationScheduleUncheckedUpdateManyInput = {
  dateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumScheduleStatusFieldUpdateOperationsInput | $Enums.ScheduleStatus
  medicationId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MedicationScheduleListRelationFilter = {
  every?: Prisma.MedicationScheduleWhereInput
  some?: Prisma.MedicationScheduleWhereInput
  none?: Prisma.MedicationScheduleWhereInput
}

export type MedicationScheduleOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MedicationScheduleCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  dateTime?: Prisma.SortOrder
  status?: Prisma.SortOrder
  medicationId?: Prisma.SortOrder
}

export type MedicationScheduleMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  dateTime?: Prisma.SortOrder
  status?: Prisma.SortOrder
  medicationId?: Prisma.SortOrder
}

export type MedicationScheduleMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  dateTime?: Prisma.SortOrder
  status?: Prisma.SortOrder
  medicationId?: Prisma.SortOrder
}

export type MedicationScheduleCreateNestedManyWithoutMedicationInput = {
  create?: Prisma.XOR<Prisma.MedicationScheduleCreateWithoutMedicationInput, Prisma.MedicationScheduleUncheckedCreateWithoutMedicationInput> | Prisma.MedicationScheduleCreateWithoutMedicationInput[] | Prisma.MedicationScheduleUncheckedCreateWithoutMedicationInput[]
  connectOrCreate?: Prisma.MedicationScheduleCreateOrConnectWithoutMedicationInput | Prisma.MedicationScheduleCreateOrConnectWithoutMedicationInput[]
  createMany?: Prisma.MedicationScheduleCreateManyMedicationInputEnvelope
  connect?: Prisma.MedicationScheduleWhereUniqueInput | Prisma.MedicationScheduleWhereUniqueInput[]
}

export type MedicationScheduleUncheckedCreateNestedManyWithoutMedicationInput = {
  create?: Prisma.XOR<Prisma.MedicationScheduleCreateWithoutMedicationInput, Prisma.MedicationScheduleUncheckedCreateWithoutMedicationInput> | Prisma.MedicationScheduleCreateWithoutMedicationInput[] | Prisma.MedicationScheduleUncheckedCreateWithoutMedicationInput[]
  connectOrCreate?: Prisma.MedicationScheduleCreateOrConnectWithoutMedicationInput | Prisma.MedicationScheduleCreateOrConnectWithoutMedicationInput[]
  createMany?: Prisma.MedicationScheduleCreateManyMedicationInputEnvelope
  connect?: Prisma.MedicationScheduleWhereUniqueInput | Prisma.MedicationScheduleWhereUniqueInput[]
}

export type MedicationScheduleUpdateManyWithoutMedicationNestedInput = {
  create?: Prisma.XOR<Prisma.MedicationScheduleCreateWithoutMedicationInput, Prisma.MedicationScheduleUncheckedCreateWithoutMedicationInput> | Prisma.MedicationScheduleCreateWithoutMedicationInput[] | Prisma.MedicationScheduleUncheckedCreateWithoutMedicationInput[]
  connectOrCreate?: Prisma.MedicationScheduleCreateOrConnectWithoutMedicationInput | Prisma.MedicationScheduleCreateOrConnectWithoutMedicationInput[]
  upsert?: Prisma.MedicationScheduleUpsertWithWhereUniqueWithoutMedicationInput | Prisma.MedicationScheduleUpsertWithWhereUniqueWithoutMedicationInput[]
  createMany?: Prisma.MedicationScheduleCreateManyMedicationInputEnvelope
  set?: Prisma.MedicationScheduleWhereUniqueInput | Prisma.MedicationScheduleWhereUniqueInput[]
  disconnect?: Prisma.MedicationScheduleWhereUniqueInput | Prisma.MedicationScheduleWhereUniqueInput[]
  delete?: Prisma.MedicationScheduleWhereUniqueInput | Prisma.MedicationScheduleWhereUniqueInput[]
  connect?: Prisma.MedicationScheduleWhereUniqueInput | Prisma.MedicationScheduleWhereUniqueInput[]
  update?: Prisma.MedicationScheduleUpdateWithWhereUniqueWithoutMedicationInput | Prisma.MedicationScheduleUpdateWithWhereUniqueWithoutMedicationInput[]
  updateMany?: Prisma.MedicationScheduleUpdateManyWithWhereWithoutMedicationInput | Prisma.MedicationScheduleUpdateManyWithWhereWithoutMedicationInput[]
  deleteMany?: Prisma.MedicationScheduleScalarWhereInput | Prisma.MedicationScheduleScalarWhereInput[]
}

export type MedicationScheduleUncheckedUpdateManyWithoutMedicationNestedInput = {
  create?: Prisma.XOR<Prisma.MedicationScheduleCreateWithoutMedicationInput, Prisma.MedicationScheduleUncheckedCreateWithoutMedicationInput> | Prisma.MedicationScheduleCreateWithoutMedicationInput[] | Prisma.MedicationScheduleUncheckedCreateWithoutMedicationInput[]
  connectOrCreate?: Prisma.MedicationScheduleCreateOrConnectWithoutMedicationInput | Prisma.MedicationScheduleCreateOrConnectWithoutMedicationInput[]
  upsert?: Prisma.MedicationScheduleUpsertWithWhereUniqueWithoutMedicationInput | Prisma.MedicationScheduleUpsertWithWhereUniqueWithoutMedicationInput[]
  createMany?: Prisma.MedicationScheduleCreateManyMedicationInputEnvelope
  set?: Prisma.MedicationScheduleWhereUniqueInput | Prisma.MedicationScheduleWhereUniqueInput[]
  disconnect?: Prisma.MedicationScheduleWhereUniqueInput | Prisma.MedicationScheduleWhereUniqueInput[]
  delete?: Prisma.MedicationScheduleWhereUniqueInput | Prisma.MedicationScheduleWhereUniqueInput[]
  connect?: Prisma.MedicationScheduleWhereUniqueInput | Prisma.MedicationScheduleWhereUniqueInput[]
  update?: Prisma.MedicationScheduleUpdateWithWhereUniqueWithoutMedicationInput | Prisma.MedicationScheduleUpdateWithWhereUniqueWithoutMedicationInput[]
  updateMany?: Prisma.MedicationScheduleUpdateManyWithWhereWithoutMedicationInput | Prisma.MedicationScheduleUpdateManyWithWhereWithoutMedicationInput[]
  deleteMany?: Prisma.MedicationScheduleScalarWhereInput | Prisma.MedicationScheduleScalarWhereInput[]
}

export type EnumScheduleStatusFieldUpdateOperationsInput = {
  set?: $Enums.ScheduleStatus
}

export type MedicationScheduleCreateWithoutMedicationInput = {
  id?: string
  dateTime: Date | string
  status?: $Enums.ScheduleStatus
}

export type MedicationScheduleUncheckedCreateWithoutMedicationInput = {
  id?: string
  dateTime: Date | string
  status?: $Enums.ScheduleStatus
}

export type MedicationScheduleCreateOrConnectWithoutMedicationInput = {
  where: Prisma.MedicationScheduleWhereUniqueInput
  create: Prisma.XOR<Prisma.MedicationScheduleCreateWithoutMedicationInput, Prisma.MedicationScheduleUncheckedCreateWithoutMedicationInput>
}

export type MedicationScheduleCreateManyMedicationInputEnvelope = {
  data: Prisma.MedicationScheduleCreateManyMedicationInput | Prisma.MedicationScheduleCreateManyMedicationInput[]
}

export type MedicationScheduleUpsertWithWhereUniqueWithoutMedicationInput = {
  where: Prisma.MedicationScheduleWhereUniqueInput
  update: Prisma.XOR<Prisma.MedicationScheduleUpdateWithoutMedicationInput, Prisma.MedicationScheduleUncheckedUpdateWithoutMedicationInput>
  create: Prisma.XOR<Prisma.MedicationScheduleCreateWithoutMedicationInput, Prisma.MedicationScheduleUncheckedCreateWithoutMedicationInput>
}

export type MedicationScheduleUpdateWithWhereUniqueWithoutMedicationInput = {
  where: Prisma.MedicationScheduleWhereUniqueInput
  data: Prisma.XOR<Prisma.MedicationScheduleUpdateWithoutMedicationInput, Prisma.MedicationScheduleUncheckedUpdateWithoutMedicationInput>
}

export type MedicationScheduleUpdateManyWithWhereWithoutMedicationInput = {
  where: Prisma.MedicationScheduleScalarWhereInput
  data: Prisma.XOR<Prisma.MedicationScheduleUpdateManyMutationInput, Prisma.MedicationScheduleUncheckedUpdateManyWithoutMedicationInput>
}

export type MedicationScheduleScalarWhereInput = {
  AND?: Prisma.MedicationScheduleScalarWhereInput | Prisma.MedicationScheduleScalarWhereInput[]
  OR?: Prisma.MedicationScheduleScalarWhereInput[]
  NOT?: Prisma.MedicationScheduleScalarWhereInput | Prisma.MedicationScheduleScalarWhereInput[]
  id?: Prisma.StringFilter<"MedicationSchedule"> | string
  dateTime?: Prisma.DateTimeFilter<"MedicationSchedule"> | Date | string
  status?: Prisma.EnumScheduleStatusFilter<"MedicationSchedule"> | $Enums.ScheduleStatus
  medicationId?: Prisma.StringFilter<"MedicationSchedule"> | string
}

export type MedicationScheduleCreateManyMedicationInput = {
  id?: string
  dateTime: Date | string
  status?: $Enums.ScheduleStatus
}

export type MedicationScheduleUpdateWithoutMedicationInput = {
  dateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumScheduleStatusFieldUpdateOperationsInput | $Enums.ScheduleStatus
}

export type MedicationScheduleUncheckedUpdateWithoutMedicationInput = {
  dateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumScheduleStatusFieldUpdateOperationsInput | $Enums.ScheduleStatus
}

export type MedicationScheduleUncheckedUpdateManyWithoutMedicationInput = {
  dateTime?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.EnumScheduleStatusFieldUpdateOperationsInput | $Enums.ScheduleStatus
}



export type MedicationScheduleSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  dateTime?: boolean
  status?: boolean
  medicationId?: boolean
  medication?: boolean | Prisma.MedicationDefaultArgs<ExtArgs>
}, ExtArgs["result"]["medicationSchedule"]>



export type MedicationScheduleSelectScalar = {
  id?: boolean
  dateTime?: boolean
  status?: boolean
  medicationId?: boolean
}

export type MedicationScheduleOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "dateTime" | "status" | "medicationId", ExtArgs["result"]["medicationSchedule"]>
export type MedicationScheduleInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  medication?: boolean | Prisma.MedicationDefaultArgs<ExtArgs>
}

export type $MedicationSchedulePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MedicationSchedule"
  objects: {
    medication: Prisma.$MedicationPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    dateTime: Date
    status: $Enums.ScheduleStatus
    medicationId: string
  }, ExtArgs["result"]["medicationSchedule"]>
  composites: {}
}

export type MedicationScheduleGetPayload<S extends boolean | null | undefined | MedicationScheduleDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MedicationSchedulePayload, S>

export type MedicationScheduleCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MedicationScheduleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MedicationScheduleCountAggregateInputType | true
  }

export interface MedicationScheduleDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MedicationSchedule'], meta: { name: 'MedicationSchedule' } }
  /**
   * Find zero or one MedicationSchedule that matches the filter.
   * @param {MedicationScheduleFindUniqueArgs} args - Arguments to find a MedicationSchedule
   * @example
   * // Get one MedicationSchedule
   * const medicationSchedule = await prisma.medicationSchedule.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MedicationScheduleFindUniqueArgs>(args: Prisma.SelectSubset<T, MedicationScheduleFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MedicationScheduleClient<runtime.Types.Result.GetResult<Prisma.$MedicationSchedulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MedicationSchedule that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MedicationScheduleFindUniqueOrThrowArgs} args - Arguments to find a MedicationSchedule
   * @example
   * // Get one MedicationSchedule
   * const medicationSchedule = await prisma.medicationSchedule.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MedicationScheduleFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MedicationScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MedicationScheduleClient<runtime.Types.Result.GetResult<Prisma.$MedicationSchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MedicationSchedule that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicationScheduleFindFirstArgs} args - Arguments to find a MedicationSchedule
   * @example
   * // Get one MedicationSchedule
   * const medicationSchedule = await prisma.medicationSchedule.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MedicationScheduleFindFirstArgs>(args?: Prisma.SelectSubset<T, MedicationScheduleFindFirstArgs<ExtArgs>>): Prisma.Prisma__MedicationScheduleClient<runtime.Types.Result.GetResult<Prisma.$MedicationSchedulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MedicationSchedule that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicationScheduleFindFirstOrThrowArgs} args - Arguments to find a MedicationSchedule
   * @example
   * // Get one MedicationSchedule
   * const medicationSchedule = await prisma.medicationSchedule.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MedicationScheduleFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MedicationScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MedicationScheduleClient<runtime.Types.Result.GetResult<Prisma.$MedicationSchedulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MedicationSchedules that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicationScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MedicationSchedules
   * const medicationSchedules = await prisma.medicationSchedule.findMany()
   * 
   * // Get first 10 MedicationSchedules
   * const medicationSchedules = await prisma.medicationSchedule.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const medicationScheduleWithIdOnly = await prisma.medicationSchedule.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MedicationScheduleFindManyArgs>(args?: Prisma.SelectSubset<T, MedicationScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MedicationSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MedicationSchedule.
   * @param {MedicationScheduleCreateArgs} args - Arguments to create a MedicationSchedule.
   * @example
   * // Create one MedicationSchedule
   * const MedicationSchedule = await prisma.medicationSchedule.create({
   *   data: {
   *     // ... data to create a MedicationSchedule
   *   }
   * })
   * 
   */
  create<T extends MedicationScheduleCreateArgs>(args: Prisma.SelectSubset<T, MedicationScheduleCreateArgs<ExtArgs>>): Prisma.Prisma__MedicationScheduleClient<runtime.Types.Result.GetResult<Prisma.$MedicationSchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MedicationSchedules.
   * @param {MedicationScheduleCreateManyArgs} args - Arguments to create many MedicationSchedules.
   * @example
   * // Create many MedicationSchedules
   * const medicationSchedule = await prisma.medicationSchedule.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MedicationScheduleCreateManyArgs>(args?: Prisma.SelectSubset<T, MedicationScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a MedicationSchedule.
   * @param {MedicationScheduleDeleteArgs} args - Arguments to delete one MedicationSchedule.
   * @example
   * // Delete one MedicationSchedule
   * const MedicationSchedule = await prisma.medicationSchedule.delete({
   *   where: {
   *     // ... filter to delete one MedicationSchedule
   *   }
   * })
   * 
   */
  delete<T extends MedicationScheduleDeleteArgs>(args: Prisma.SelectSubset<T, MedicationScheduleDeleteArgs<ExtArgs>>): Prisma.Prisma__MedicationScheduleClient<runtime.Types.Result.GetResult<Prisma.$MedicationSchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MedicationSchedule.
   * @param {MedicationScheduleUpdateArgs} args - Arguments to update one MedicationSchedule.
   * @example
   * // Update one MedicationSchedule
   * const medicationSchedule = await prisma.medicationSchedule.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MedicationScheduleUpdateArgs>(args: Prisma.SelectSubset<T, MedicationScheduleUpdateArgs<ExtArgs>>): Prisma.Prisma__MedicationScheduleClient<runtime.Types.Result.GetResult<Prisma.$MedicationSchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MedicationSchedules.
   * @param {MedicationScheduleDeleteManyArgs} args - Arguments to filter MedicationSchedules to delete.
   * @example
   * // Delete a few MedicationSchedules
   * const { count } = await prisma.medicationSchedule.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MedicationScheduleDeleteManyArgs>(args?: Prisma.SelectSubset<T, MedicationScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MedicationSchedules.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicationScheduleUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MedicationSchedules
   * const medicationSchedule = await prisma.medicationSchedule.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MedicationScheduleUpdateManyArgs>(args: Prisma.SelectSubset<T, MedicationScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one MedicationSchedule.
   * @param {MedicationScheduleUpsertArgs} args - Arguments to update or create a MedicationSchedule.
   * @example
   * // Update or create a MedicationSchedule
   * const medicationSchedule = await prisma.medicationSchedule.upsert({
   *   create: {
   *     // ... data to create a MedicationSchedule
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MedicationSchedule we want to update
   *   }
   * })
   */
  upsert<T extends MedicationScheduleUpsertArgs>(args: Prisma.SelectSubset<T, MedicationScheduleUpsertArgs<ExtArgs>>): Prisma.Prisma__MedicationScheduleClient<runtime.Types.Result.GetResult<Prisma.$MedicationSchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MedicationSchedules that matches the filter.
   * @param {MedicationScheduleFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const medicationSchedule = await prisma.medicationSchedule.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.MedicationScheduleFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a MedicationSchedule.
   * @param {MedicationScheduleAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const medicationSchedule = await prisma.medicationSchedule.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.MedicationScheduleAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of MedicationSchedules.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicationScheduleCountArgs} args - Arguments to filter MedicationSchedules to count.
   * @example
   * // Count the number of MedicationSchedules
   * const count = await prisma.medicationSchedule.count({
   *   where: {
   *     // ... the filter for the MedicationSchedules we want to count
   *   }
   * })
  **/
  count<T extends MedicationScheduleCountArgs>(
    args?: Prisma.Subset<T, MedicationScheduleCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MedicationScheduleCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MedicationSchedule.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicationScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MedicationScheduleAggregateArgs>(args: Prisma.Subset<T, MedicationScheduleAggregateArgs>): Prisma.PrismaPromise<GetMedicationScheduleAggregateType<T>>

  /**
   * Group by MedicationSchedule.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicationScheduleGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MedicationScheduleGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MedicationScheduleGroupByArgs['orderBy'] }
      : { orderBy?: MedicationScheduleGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MedicationScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicationScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MedicationSchedule model
 */
readonly fields: MedicationScheduleFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MedicationSchedule.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MedicationScheduleClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  medication<T extends Prisma.MedicationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.MedicationDefaultArgs<ExtArgs>>): Prisma.Prisma__MedicationClient<runtime.Types.Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MedicationSchedule model
 */
export interface MedicationScheduleFieldRefs {
  readonly id: Prisma.FieldRef<"MedicationSchedule", 'String'>
  readonly dateTime: Prisma.FieldRef<"MedicationSchedule", 'DateTime'>
  readonly status: Prisma.FieldRef<"MedicationSchedule", 'ScheduleStatus'>
  readonly medicationId: Prisma.FieldRef<"MedicationSchedule", 'String'>
}
    

// Custom InputTypes
/**
 * MedicationSchedule findUnique
 */
export type MedicationScheduleFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicationSchedule
   */
  select?: Prisma.MedicationScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicationSchedule
   */
  omit?: Prisma.MedicationScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicationScheduleInclude<ExtArgs> | null
  /**
   * Filter, which MedicationSchedule to fetch.
   */
  where: Prisma.MedicationScheduleWhereUniqueInput
}

/**
 * MedicationSchedule findUniqueOrThrow
 */
export type MedicationScheduleFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicationSchedule
   */
  select?: Prisma.MedicationScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicationSchedule
   */
  omit?: Prisma.MedicationScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicationScheduleInclude<ExtArgs> | null
  /**
   * Filter, which MedicationSchedule to fetch.
   */
  where: Prisma.MedicationScheduleWhereUniqueInput
}

/**
 * MedicationSchedule findFirst
 */
export type MedicationScheduleFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicationSchedule
   */
  select?: Prisma.MedicationScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicationSchedule
   */
  omit?: Prisma.MedicationScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicationScheduleInclude<ExtArgs> | null
  /**
   * Filter, which MedicationSchedule to fetch.
   */
  where?: Prisma.MedicationScheduleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MedicationSchedules to fetch.
   */
  orderBy?: Prisma.MedicationScheduleOrderByWithRelationInput | Prisma.MedicationScheduleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MedicationSchedules.
   */
  cursor?: Prisma.MedicationScheduleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MedicationSchedules from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MedicationSchedules.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MedicationSchedules.
   */
  distinct?: Prisma.MedicationScheduleScalarFieldEnum | Prisma.MedicationScheduleScalarFieldEnum[]
}

/**
 * MedicationSchedule findFirstOrThrow
 */
export type MedicationScheduleFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicationSchedule
   */
  select?: Prisma.MedicationScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicationSchedule
   */
  omit?: Prisma.MedicationScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicationScheduleInclude<ExtArgs> | null
  /**
   * Filter, which MedicationSchedule to fetch.
   */
  where?: Prisma.MedicationScheduleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MedicationSchedules to fetch.
   */
  orderBy?: Prisma.MedicationScheduleOrderByWithRelationInput | Prisma.MedicationScheduleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MedicationSchedules.
   */
  cursor?: Prisma.MedicationScheduleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MedicationSchedules from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MedicationSchedules.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MedicationSchedules.
   */
  distinct?: Prisma.MedicationScheduleScalarFieldEnum | Prisma.MedicationScheduleScalarFieldEnum[]
}

/**
 * MedicationSchedule findMany
 */
export type MedicationScheduleFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicationSchedule
   */
  select?: Prisma.MedicationScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicationSchedule
   */
  omit?: Prisma.MedicationScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicationScheduleInclude<ExtArgs> | null
  /**
   * Filter, which MedicationSchedules to fetch.
   */
  where?: Prisma.MedicationScheduleWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MedicationSchedules to fetch.
   */
  orderBy?: Prisma.MedicationScheduleOrderByWithRelationInput | Prisma.MedicationScheduleOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MedicationSchedules.
   */
  cursor?: Prisma.MedicationScheduleWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MedicationSchedules from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MedicationSchedules.
   */
  skip?: number
  distinct?: Prisma.MedicationScheduleScalarFieldEnum | Prisma.MedicationScheduleScalarFieldEnum[]
}

/**
 * MedicationSchedule create
 */
export type MedicationScheduleCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicationSchedule
   */
  select?: Prisma.MedicationScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicationSchedule
   */
  omit?: Prisma.MedicationScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicationScheduleInclude<ExtArgs> | null
  /**
   * The data needed to create a MedicationSchedule.
   */
  data: Prisma.XOR<Prisma.MedicationScheduleCreateInput, Prisma.MedicationScheduleUncheckedCreateInput>
}

/**
 * MedicationSchedule createMany
 */
export type MedicationScheduleCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MedicationSchedules.
   */
  data: Prisma.MedicationScheduleCreateManyInput | Prisma.MedicationScheduleCreateManyInput[]
}

/**
 * MedicationSchedule update
 */
export type MedicationScheduleUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicationSchedule
   */
  select?: Prisma.MedicationScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicationSchedule
   */
  omit?: Prisma.MedicationScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicationScheduleInclude<ExtArgs> | null
  /**
   * The data needed to update a MedicationSchedule.
   */
  data: Prisma.XOR<Prisma.MedicationScheduleUpdateInput, Prisma.MedicationScheduleUncheckedUpdateInput>
  /**
   * Choose, which MedicationSchedule to update.
   */
  where: Prisma.MedicationScheduleWhereUniqueInput
}

/**
 * MedicationSchedule updateMany
 */
export type MedicationScheduleUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MedicationSchedules.
   */
  data: Prisma.XOR<Prisma.MedicationScheduleUpdateManyMutationInput, Prisma.MedicationScheduleUncheckedUpdateManyInput>
  /**
   * Filter which MedicationSchedules to update
   */
  where?: Prisma.MedicationScheduleWhereInput
  /**
   * Limit how many MedicationSchedules to update.
   */
  limit?: number
}

/**
 * MedicationSchedule upsert
 */
export type MedicationScheduleUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicationSchedule
   */
  select?: Prisma.MedicationScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicationSchedule
   */
  omit?: Prisma.MedicationScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicationScheduleInclude<ExtArgs> | null
  /**
   * The filter to search for the MedicationSchedule to update in case it exists.
   */
  where: Prisma.MedicationScheduleWhereUniqueInput
  /**
   * In case the MedicationSchedule found by the `where` argument doesn't exist, create a new MedicationSchedule with this data.
   */
  create: Prisma.XOR<Prisma.MedicationScheduleCreateInput, Prisma.MedicationScheduleUncheckedCreateInput>
  /**
   * In case the MedicationSchedule was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MedicationScheduleUpdateInput, Prisma.MedicationScheduleUncheckedUpdateInput>
}

/**
 * MedicationSchedule delete
 */
export type MedicationScheduleDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicationSchedule
   */
  select?: Prisma.MedicationScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicationSchedule
   */
  omit?: Prisma.MedicationScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicationScheduleInclude<ExtArgs> | null
  /**
   * Filter which MedicationSchedule to delete.
   */
  where: Prisma.MedicationScheduleWhereUniqueInput
}

/**
 * MedicationSchedule deleteMany
 */
export type MedicationScheduleDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MedicationSchedules to delete
   */
  where?: Prisma.MedicationScheduleWhereInput
  /**
   * Limit how many MedicationSchedules to delete.
   */
  limit?: number
}

/**
 * MedicationSchedule findRaw
 */
export type MedicationScheduleFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * MedicationSchedule aggregateRaw
 */
export type MedicationScheduleAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * MedicationSchedule without action
 */
export type MedicationScheduleDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicationSchedule
   */
  select?: Prisma.MedicationScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicationSchedule
   */
  omit?: Prisma.MedicationScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicationScheduleInclude<ExtArgs> | null
}
