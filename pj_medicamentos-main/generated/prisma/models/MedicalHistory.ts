
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `MedicalHistory` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model MedicalHistory
 * 
 */
export type MedicalHistoryModel = runtime.Types.Result.DefaultSelection<Prisma.$MedicalHistoryPayload>

export type AggregateMedicalHistory = {
  _count: MedicalHistoryCountAggregateOutputType | null
  _min: MedicalHistoryMinAggregateOutputType | null
  _max: MedicalHistoryMaxAggregateOutputType | null
}

export type MedicalHistoryMinAggregateOutputType = {
  id: string | null
  condition: string | null
  notes: string | null
  date: Date | null
  userId: string | null
}

export type MedicalHistoryMaxAggregateOutputType = {
  id: string | null
  condition: string | null
  notes: string | null
  date: Date | null
  userId: string | null
}

export type MedicalHistoryCountAggregateOutputType = {
  id: number
  condition: number
  notes: number
  date: number
  userId: number
  _all: number
}


export type MedicalHistoryMinAggregateInputType = {
  id?: true
  condition?: true
  notes?: true
  date?: true
  userId?: true
}

export type MedicalHistoryMaxAggregateInputType = {
  id?: true
  condition?: true
  notes?: true
  date?: true
  userId?: true
}

export type MedicalHistoryCountAggregateInputType = {
  id?: true
  condition?: true
  notes?: true
  date?: true
  userId?: true
  _all?: true
}

export type MedicalHistoryAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MedicalHistory to aggregate.
   */
  where?: Prisma.MedicalHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MedicalHistories to fetch.
   */
  orderBy?: Prisma.MedicalHistoryOrderByWithRelationInput | Prisma.MedicalHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MedicalHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MedicalHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MedicalHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned MedicalHistories
  **/
  _count?: true | MedicalHistoryCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MedicalHistoryMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MedicalHistoryMaxAggregateInputType
}

export type GetMedicalHistoryAggregateType<T extends MedicalHistoryAggregateArgs> = {
      [P in keyof T & keyof AggregateMedicalHistory]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMedicalHistory[P]>
    : Prisma.GetScalarType<T[P], AggregateMedicalHistory[P]>
}




export type MedicalHistoryGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MedicalHistoryWhereInput
  orderBy?: Prisma.MedicalHistoryOrderByWithAggregationInput | Prisma.MedicalHistoryOrderByWithAggregationInput[]
  by: Prisma.MedicalHistoryScalarFieldEnum[] | Prisma.MedicalHistoryScalarFieldEnum
  having?: Prisma.MedicalHistoryScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MedicalHistoryCountAggregateInputType | true
  _min?: MedicalHistoryMinAggregateInputType
  _max?: MedicalHistoryMaxAggregateInputType
}

export type MedicalHistoryGroupByOutputType = {
  id: string
  condition: string
  notes: string | null
  date: Date
  userId: string
  _count: MedicalHistoryCountAggregateOutputType | null
  _min: MedicalHistoryMinAggregateOutputType | null
  _max: MedicalHistoryMaxAggregateOutputType | null
}

type GetMedicalHistoryGroupByPayload<T extends MedicalHistoryGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MedicalHistoryGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MedicalHistoryGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MedicalHistoryGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MedicalHistoryGroupByOutputType[P]>
      }
    >
  >



export type MedicalHistoryWhereInput = {
  AND?: Prisma.MedicalHistoryWhereInput | Prisma.MedicalHistoryWhereInput[]
  OR?: Prisma.MedicalHistoryWhereInput[]
  NOT?: Prisma.MedicalHistoryWhereInput | Prisma.MedicalHistoryWhereInput[]
  id?: Prisma.StringFilter<"MedicalHistory"> | string
  condition?: Prisma.StringFilter<"MedicalHistory"> | string
  notes?: Prisma.StringNullableFilter<"MedicalHistory"> | string | null
  date?: Prisma.DateTimeFilter<"MedicalHistory"> | Date | string
  userId?: Prisma.StringFilter<"MedicalHistory"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}

export type MedicalHistoryOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  condition?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  date?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
}

export type MedicalHistoryWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.MedicalHistoryWhereInput | Prisma.MedicalHistoryWhereInput[]
  OR?: Prisma.MedicalHistoryWhereInput[]
  NOT?: Prisma.MedicalHistoryWhereInput | Prisma.MedicalHistoryWhereInput[]
  condition?: Prisma.StringFilter<"MedicalHistory"> | string
  notes?: Prisma.StringNullableFilter<"MedicalHistory"> | string | null
  date?: Prisma.DateTimeFilter<"MedicalHistory"> | Date | string
  userId?: Prisma.StringFilter<"MedicalHistory"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
}, "id">

export type MedicalHistoryOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  condition?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  date?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  _count?: Prisma.MedicalHistoryCountOrderByAggregateInput
  _max?: Prisma.MedicalHistoryMaxOrderByAggregateInput
  _min?: Prisma.MedicalHistoryMinOrderByAggregateInput
}

export type MedicalHistoryScalarWhereWithAggregatesInput = {
  AND?: Prisma.MedicalHistoryScalarWhereWithAggregatesInput | Prisma.MedicalHistoryScalarWhereWithAggregatesInput[]
  OR?: Prisma.MedicalHistoryScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MedicalHistoryScalarWhereWithAggregatesInput | Prisma.MedicalHistoryScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"MedicalHistory"> | string
  condition?: Prisma.StringWithAggregatesFilter<"MedicalHistory"> | string
  notes?: Prisma.StringNullableWithAggregatesFilter<"MedicalHistory"> | string | null
  date?: Prisma.DateTimeWithAggregatesFilter<"MedicalHistory"> | Date | string
  userId?: Prisma.StringWithAggregatesFilter<"MedicalHistory"> | string
}

export type MedicalHistoryCreateInput = {
  id?: string
  condition: string
  notes?: string | null
  date?: Date | string
  user: Prisma.UserCreateNestedOneWithoutMedicalHistoryInput
}

export type MedicalHistoryUncheckedCreateInput = {
  id?: string
  condition: string
  notes?: string | null
  date?: Date | string
  userId: string
}

export type MedicalHistoryUpdateInput = {
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutMedicalHistoryNestedInput
}

export type MedicalHistoryUncheckedUpdateInput = {
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MedicalHistoryCreateManyInput = {
  id?: string
  condition: string
  notes?: string | null
  date?: Date | string
  userId: string
}

export type MedicalHistoryUpdateManyMutationInput = {
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MedicalHistoryUncheckedUpdateManyInput = {
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MedicalHistoryListRelationFilter = {
  every?: Prisma.MedicalHistoryWhereInput
  some?: Prisma.MedicalHistoryWhereInput
  none?: Prisma.MedicalHistoryWhereInput
}

export type MedicalHistoryOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MedicalHistoryCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  condition?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  date?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type MedicalHistoryMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  condition?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  date?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type MedicalHistoryMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  condition?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  date?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type MedicalHistoryCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MedicalHistoryCreateWithoutUserInput, Prisma.MedicalHistoryUncheckedCreateWithoutUserInput> | Prisma.MedicalHistoryCreateWithoutUserInput[] | Prisma.MedicalHistoryUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MedicalHistoryCreateOrConnectWithoutUserInput | Prisma.MedicalHistoryCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MedicalHistoryCreateManyUserInputEnvelope
  connect?: Prisma.MedicalHistoryWhereUniqueInput | Prisma.MedicalHistoryWhereUniqueInput[]
}

export type MedicalHistoryUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MedicalHistoryCreateWithoutUserInput, Prisma.MedicalHistoryUncheckedCreateWithoutUserInput> | Prisma.MedicalHistoryCreateWithoutUserInput[] | Prisma.MedicalHistoryUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MedicalHistoryCreateOrConnectWithoutUserInput | Prisma.MedicalHistoryCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MedicalHistoryCreateManyUserInputEnvelope
  connect?: Prisma.MedicalHistoryWhereUniqueInput | Prisma.MedicalHistoryWhereUniqueInput[]
}

export type MedicalHistoryUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MedicalHistoryCreateWithoutUserInput, Prisma.MedicalHistoryUncheckedCreateWithoutUserInput> | Prisma.MedicalHistoryCreateWithoutUserInput[] | Prisma.MedicalHistoryUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MedicalHistoryCreateOrConnectWithoutUserInput | Prisma.MedicalHistoryCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MedicalHistoryUpsertWithWhereUniqueWithoutUserInput | Prisma.MedicalHistoryUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MedicalHistoryCreateManyUserInputEnvelope
  set?: Prisma.MedicalHistoryWhereUniqueInput | Prisma.MedicalHistoryWhereUniqueInput[]
  disconnect?: Prisma.MedicalHistoryWhereUniqueInput | Prisma.MedicalHistoryWhereUniqueInput[]
  delete?: Prisma.MedicalHistoryWhereUniqueInput | Prisma.MedicalHistoryWhereUniqueInput[]
  connect?: Prisma.MedicalHistoryWhereUniqueInput | Prisma.MedicalHistoryWhereUniqueInput[]
  update?: Prisma.MedicalHistoryUpdateWithWhereUniqueWithoutUserInput | Prisma.MedicalHistoryUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MedicalHistoryUpdateManyWithWhereWithoutUserInput | Prisma.MedicalHistoryUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MedicalHistoryScalarWhereInput | Prisma.MedicalHistoryScalarWhereInput[]
}

export type MedicalHistoryUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MedicalHistoryCreateWithoutUserInput, Prisma.MedicalHistoryUncheckedCreateWithoutUserInput> | Prisma.MedicalHistoryCreateWithoutUserInput[] | Prisma.MedicalHistoryUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MedicalHistoryCreateOrConnectWithoutUserInput | Prisma.MedicalHistoryCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MedicalHistoryUpsertWithWhereUniqueWithoutUserInput | Prisma.MedicalHistoryUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MedicalHistoryCreateManyUserInputEnvelope
  set?: Prisma.MedicalHistoryWhereUniqueInput | Prisma.MedicalHistoryWhereUniqueInput[]
  disconnect?: Prisma.MedicalHistoryWhereUniqueInput | Prisma.MedicalHistoryWhereUniqueInput[]
  delete?: Prisma.MedicalHistoryWhereUniqueInput | Prisma.MedicalHistoryWhereUniqueInput[]
  connect?: Prisma.MedicalHistoryWhereUniqueInput | Prisma.MedicalHistoryWhereUniqueInput[]
  update?: Prisma.MedicalHistoryUpdateWithWhereUniqueWithoutUserInput | Prisma.MedicalHistoryUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MedicalHistoryUpdateManyWithWhereWithoutUserInput | Prisma.MedicalHistoryUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MedicalHistoryScalarWhereInput | Prisma.MedicalHistoryScalarWhereInput[]
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
  unset?: boolean
}

export type MedicalHistoryCreateWithoutUserInput = {
  id?: string
  condition: string
  notes?: string | null
  date?: Date | string
}

export type MedicalHistoryUncheckedCreateWithoutUserInput = {
  id?: string
  condition: string
  notes?: string | null
  date?: Date | string
}

export type MedicalHistoryCreateOrConnectWithoutUserInput = {
  where: Prisma.MedicalHistoryWhereUniqueInput
  create: Prisma.XOR<Prisma.MedicalHistoryCreateWithoutUserInput, Prisma.MedicalHistoryUncheckedCreateWithoutUserInput>
}

export type MedicalHistoryCreateManyUserInputEnvelope = {
  data: Prisma.MedicalHistoryCreateManyUserInput | Prisma.MedicalHistoryCreateManyUserInput[]
}

export type MedicalHistoryUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.MedicalHistoryWhereUniqueInput
  update: Prisma.XOR<Prisma.MedicalHistoryUpdateWithoutUserInput, Prisma.MedicalHistoryUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.MedicalHistoryCreateWithoutUserInput, Prisma.MedicalHistoryUncheckedCreateWithoutUserInput>
}

export type MedicalHistoryUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.MedicalHistoryWhereUniqueInput
  data: Prisma.XOR<Prisma.MedicalHistoryUpdateWithoutUserInput, Prisma.MedicalHistoryUncheckedUpdateWithoutUserInput>
}

export type MedicalHistoryUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.MedicalHistoryScalarWhereInput
  data: Prisma.XOR<Prisma.MedicalHistoryUpdateManyMutationInput, Prisma.MedicalHistoryUncheckedUpdateManyWithoutUserInput>
}

export type MedicalHistoryScalarWhereInput = {
  AND?: Prisma.MedicalHistoryScalarWhereInput | Prisma.MedicalHistoryScalarWhereInput[]
  OR?: Prisma.MedicalHistoryScalarWhereInput[]
  NOT?: Prisma.MedicalHistoryScalarWhereInput | Prisma.MedicalHistoryScalarWhereInput[]
  id?: Prisma.StringFilter<"MedicalHistory"> | string
  condition?: Prisma.StringFilter<"MedicalHistory"> | string
  notes?: Prisma.StringNullableFilter<"MedicalHistory"> | string | null
  date?: Prisma.DateTimeFilter<"MedicalHistory"> | Date | string
  userId?: Prisma.StringFilter<"MedicalHistory"> | string
}

export type MedicalHistoryCreateManyUserInput = {
  id?: string
  condition: string
  notes?: string | null
  date?: Date | string
}

export type MedicalHistoryUpdateWithoutUserInput = {
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MedicalHistoryUncheckedUpdateWithoutUserInput = {
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MedicalHistoryUncheckedUpdateManyWithoutUserInput = {
  condition?: Prisma.StringFieldUpdateOperationsInput | string
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type MedicalHistorySelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  condition?: boolean
  notes?: boolean
  date?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["medicalHistory"]>



export type MedicalHistorySelectScalar = {
  id?: boolean
  condition?: boolean
  notes?: boolean
  date?: boolean
  userId?: boolean
}

export type MedicalHistoryOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "condition" | "notes" | "date" | "userId", ExtArgs["result"]["medicalHistory"]>
export type MedicalHistoryInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $MedicalHistoryPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "MedicalHistory"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    condition: string
    notes: string | null
    date: Date
    userId: string
  }, ExtArgs["result"]["medicalHistory"]>
  composites: {}
}

export type MedicalHistoryGetPayload<S extends boolean | null | undefined | MedicalHistoryDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MedicalHistoryPayload, S>

export type MedicalHistoryCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MedicalHistoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MedicalHistoryCountAggregateInputType | true
  }

export interface MedicalHistoryDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MedicalHistory'], meta: { name: 'MedicalHistory' } }
  /**
   * Find zero or one MedicalHistory that matches the filter.
   * @param {MedicalHistoryFindUniqueArgs} args - Arguments to find a MedicalHistory
   * @example
   * // Get one MedicalHistory
   * const medicalHistory = await prisma.medicalHistory.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MedicalHistoryFindUniqueArgs>(args: Prisma.SelectSubset<T, MedicalHistoryFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MedicalHistoryClient<runtime.Types.Result.GetResult<Prisma.$MedicalHistoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one MedicalHistory that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MedicalHistoryFindUniqueOrThrowArgs} args - Arguments to find a MedicalHistory
   * @example
   * // Get one MedicalHistory
   * const medicalHistory = await prisma.medicalHistory.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MedicalHistoryFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MedicalHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MedicalHistoryClient<runtime.Types.Result.GetResult<Prisma.$MedicalHistoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MedicalHistory that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicalHistoryFindFirstArgs} args - Arguments to find a MedicalHistory
   * @example
   * // Get one MedicalHistory
   * const medicalHistory = await prisma.medicalHistory.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MedicalHistoryFindFirstArgs>(args?: Prisma.SelectSubset<T, MedicalHistoryFindFirstArgs<ExtArgs>>): Prisma.Prisma__MedicalHistoryClient<runtime.Types.Result.GetResult<Prisma.$MedicalHistoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first MedicalHistory that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicalHistoryFindFirstOrThrowArgs} args - Arguments to find a MedicalHistory
   * @example
   * // Get one MedicalHistory
   * const medicalHistory = await prisma.medicalHistory.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MedicalHistoryFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MedicalHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MedicalHistoryClient<runtime.Types.Result.GetResult<Prisma.$MedicalHistoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MedicalHistories that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicalHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all MedicalHistories
   * const medicalHistories = await prisma.medicalHistory.findMany()
   * 
   * // Get first 10 MedicalHistories
   * const medicalHistories = await prisma.medicalHistory.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const medicalHistoryWithIdOnly = await prisma.medicalHistory.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MedicalHistoryFindManyArgs>(args?: Prisma.SelectSubset<T, MedicalHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MedicalHistoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a MedicalHistory.
   * @param {MedicalHistoryCreateArgs} args - Arguments to create a MedicalHistory.
   * @example
   * // Create one MedicalHistory
   * const MedicalHistory = await prisma.medicalHistory.create({
   *   data: {
   *     // ... data to create a MedicalHistory
   *   }
   * })
   * 
   */
  create<T extends MedicalHistoryCreateArgs>(args: Prisma.SelectSubset<T, MedicalHistoryCreateArgs<ExtArgs>>): Prisma.Prisma__MedicalHistoryClient<runtime.Types.Result.GetResult<Prisma.$MedicalHistoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many MedicalHistories.
   * @param {MedicalHistoryCreateManyArgs} args - Arguments to create many MedicalHistories.
   * @example
   * // Create many MedicalHistories
   * const medicalHistory = await prisma.medicalHistory.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MedicalHistoryCreateManyArgs>(args?: Prisma.SelectSubset<T, MedicalHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a MedicalHistory.
   * @param {MedicalHistoryDeleteArgs} args - Arguments to delete one MedicalHistory.
   * @example
   * // Delete one MedicalHistory
   * const MedicalHistory = await prisma.medicalHistory.delete({
   *   where: {
   *     // ... filter to delete one MedicalHistory
   *   }
   * })
   * 
   */
  delete<T extends MedicalHistoryDeleteArgs>(args: Prisma.SelectSubset<T, MedicalHistoryDeleteArgs<ExtArgs>>): Prisma.Prisma__MedicalHistoryClient<runtime.Types.Result.GetResult<Prisma.$MedicalHistoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one MedicalHistory.
   * @param {MedicalHistoryUpdateArgs} args - Arguments to update one MedicalHistory.
   * @example
   * // Update one MedicalHistory
   * const medicalHistory = await prisma.medicalHistory.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MedicalHistoryUpdateArgs>(args: Prisma.SelectSubset<T, MedicalHistoryUpdateArgs<ExtArgs>>): Prisma.Prisma__MedicalHistoryClient<runtime.Types.Result.GetResult<Prisma.$MedicalHistoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more MedicalHistories.
   * @param {MedicalHistoryDeleteManyArgs} args - Arguments to filter MedicalHistories to delete.
   * @example
   * // Delete a few MedicalHistories
   * const { count } = await prisma.medicalHistory.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MedicalHistoryDeleteManyArgs>(args?: Prisma.SelectSubset<T, MedicalHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more MedicalHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicalHistoryUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many MedicalHistories
   * const medicalHistory = await prisma.medicalHistory.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MedicalHistoryUpdateManyArgs>(args: Prisma.SelectSubset<T, MedicalHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one MedicalHistory.
   * @param {MedicalHistoryUpsertArgs} args - Arguments to update or create a MedicalHistory.
   * @example
   * // Update or create a MedicalHistory
   * const medicalHistory = await prisma.medicalHistory.upsert({
   *   create: {
   *     // ... data to create a MedicalHistory
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the MedicalHistory we want to update
   *   }
   * })
   */
  upsert<T extends MedicalHistoryUpsertArgs>(args: Prisma.SelectSubset<T, MedicalHistoryUpsertArgs<ExtArgs>>): Prisma.Prisma__MedicalHistoryClient<runtime.Types.Result.GetResult<Prisma.$MedicalHistoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more MedicalHistories that matches the filter.
   * @param {MedicalHistoryFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const medicalHistory = await prisma.medicalHistory.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.MedicalHistoryFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a MedicalHistory.
   * @param {MedicalHistoryAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const medicalHistory = await prisma.medicalHistory.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.MedicalHistoryAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of MedicalHistories.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicalHistoryCountArgs} args - Arguments to filter MedicalHistories to count.
   * @example
   * // Count the number of MedicalHistories
   * const count = await prisma.medicalHistory.count({
   *   where: {
   *     // ... the filter for the MedicalHistories we want to count
   *   }
   * })
  **/
  count<T extends MedicalHistoryCountArgs>(
    args?: Prisma.Subset<T, MedicalHistoryCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MedicalHistoryCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a MedicalHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicalHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MedicalHistoryAggregateArgs>(args: Prisma.Subset<T, MedicalHistoryAggregateArgs>): Prisma.PrismaPromise<GetMedicalHistoryAggregateType<T>>

  /**
   * Group by MedicalHistory.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicalHistoryGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MedicalHistoryGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MedicalHistoryGroupByArgs['orderBy'] }
      : { orderBy?: MedicalHistoryGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MedicalHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicalHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the MedicalHistory model
 */
readonly fields: MedicalHistoryFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for MedicalHistory.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MedicalHistoryClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the MedicalHistory model
 */
export interface MedicalHistoryFieldRefs {
  readonly id: Prisma.FieldRef<"MedicalHistory", 'String'>
  readonly condition: Prisma.FieldRef<"MedicalHistory", 'String'>
  readonly notes: Prisma.FieldRef<"MedicalHistory", 'String'>
  readonly date: Prisma.FieldRef<"MedicalHistory", 'DateTime'>
  readonly userId: Prisma.FieldRef<"MedicalHistory", 'String'>
}
    

// Custom InputTypes
/**
 * MedicalHistory findUnique
 */
export type MedicalHistoryFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicalHistory
   */
  select?: Prisma.MedicalHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicalHistory
   */
  omit?: Prisma.MedicalHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicalHistoryInclude<ExtArgs> | null
  /**
   * Filter, which MedicalHistory to fetch.
   */
  where: Prisma.MedicalHistoryWhereUniqueInput
}

/**
 * MedicalHistory findUniqueOrThrow
 */
export type MedicalHistoryFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicalHistory
   */
  select?: Prisma.MedicalHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicalHistory
   */
  omit?: Prisma.MedicalHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicalHistoryInclude<ExtArgs> | null
  /**
   * Filter, which MedicalHistory to fetch.
   */
  where: Prisma.MedicalHistoryWhereUniqueInput
}

/**
 * MedicalHistory findFirst
 */
export type MedicalHistoryFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicalHistory
   */
  select?: Prisma.MedicalHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicalHistory
   */
  omit?: Prisma.MedicalHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicalHistoryInclude<ExtArgs> | null
  /**
   * Filter, which MedicalHistory to fetch.
   */
  where?: Prisma.MedicalHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MedicalHistories to fetch.
   */
  orderBy?: Prisma.MedicalHistoryOrderByWithRelationInput | Prisma.MedicalHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MedicalHistories.
   */
  cursor?: Prisma.MedicalHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MedicalHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MedicalHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MedicalHistories.
   */
  distinct?: Prisma.MedicalHistoryScalarFieldEnum | Prisma.MedicalHistoryScalarFieldEnum[]
}

/**
 * MedicalHistory findFirstOrThrow
 */
export type MedicalHistoryFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicalHistory
   */
  select?: Prisma.MedicalHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicalHistory
   */
  omit?: Prisma.MedicalHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicalHistoryInclude<ExtArgs> | null
  /**
   * Filter, which MedicalHistory to fetch.
   */
  where?: Prisma.MedicalHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MedicalHistories to fetch.
   */
  orderBy?: Prisma.MedicalHistoryOrderByWithRelationInput | Prisma.MedicalHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for MedicalHistories.
   */
  cursor?: Prisma.MedicalHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MedicalHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MedicalHistories.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of MedicalHistories.
   */
  distinct?: Prisma.MedicalHistoryScalarFieldEnum | Prisma.MedicalHistoryScalarFieldEnum[]
}

/**
 * MedicalHistory findMany
 */
export type MedicalHistoryFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicalHistory
   */
  select?: Prisma.MedicalHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicalHistory
   */
  omit?: Prisma.MedicalHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicalHistoryInclude<ExtArgs> | null
  /**
   * Filter, which MedicalHistories to fetch.
   */
  where?: Prisma.MedicalHistoryWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of MedicalHistories to fetch.
   */
  orderBy?: Prisma.MedicalHistoryOrderByWithRelationInput | Prisma.MedicalHistoryOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing MedicalHistories.
   */
  cursor?: Prisma.MedicalHistoryWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` MedicalHistories from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` MedicalHistories.
   */
  skip?: number
  distinct?: Prisma.MedicalHistoryScalarFieldEnum | Prisma.MedicalHistoryScalarFieldEnum[]
}

/**
 * MedicalHistory create
 */
export type MedicalHistoryCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicalHistory
   */
  select?: Prisma.MedicalHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicalHistory
   */
  omit?: Prisma.MedicalHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicalHistoryInclude<ExtArgs> | null
  /**
   * The data needed to create a MedicalHistory.
   */
  data: Prisma.XOR<Prisma.MedicalHistoryCreateInput, Prisma.MedicalHistoryUncheckedCreateInput>
}

/**
 * MedicalHistory createMany
 */
export type MedicalHistoryCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many MedicalHistories.
   */
  data: Prisma.MedicalHistoryCreateManyInput | Prisma.MedicalHistoryCreateManyInput[]
}

/**
 * MedicalHistory update
 */
export type MedicalHistoryUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicalHistory
   */
  select?: Prisma.MedicalHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicalHistory
   */
  omit?: Prisma.MedicalHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicalHistoryInclude<ExtArgs> | null
  /**
   * The data needed to update a MedicalHistory.
   */
  data: Prisma.XOR<Prisma.MedicalHistoryUpdateInput, Prisma.MedicalHistoryUncheckedUpdateInput>
  /**
   * Choose, which MedicalHistory to update.
   */
  where: Prisma.MedicalHistoryWhereUniqueInput
}

/**
 * MedicalHistory updateMany
 */
export type MedicalHistoryUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update MedicalHistories.
   */
  data: Prisma.XOR<Prisma.MedicalHistoryUpdateManyMutationInput, Prisma.MedicalHistoryUncheckedUpdateManyInput>
  /**
   * Filter which MedicalHistories to update
   */
  where?: Prisma.MedicalHistoryWhereInput
  /**
   * Limit how many MedicalHistories to update.
   */
  limit?: number
}

/**
 * MedicalHistory upsert
 */
export type MedicalHistoryUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicalHistory
   */
  select?: Prisma.MedicalHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicalHistory
   */
  omit?: Prisma.MedicalHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicalHistoryInclude<ExtArgs> | null
  /**
   * The filter to search for the MedicalHistory to update in case it exists.
   */
  where: Prisma.MedicalHistoryWhereUniqueInput
  /**
   * In case the MedicalHistory found by the `where` argument doesn't exist, create a new MedicalHistory with this data.
   */
  create: Prisma.XOR<Prisma.MedicalHistoryCreateInput, Prisma.MedicalHistoryUncheckedCreateInput>
  /**
   * In case the MedicalHistory was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MedicalHistoryUpdateInput, Prisma.MedicalHistoryUncheckedUpdateInput>
}

/**
 * MedicalHistory delete
 */
export type MedicalHistoryDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicalHistory
   */
  select?: Prisma.MedicalHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicalHistory
   */
  omit?: Prisma.MedicalHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicalHistoryInclude<ExtArgs> | null
  /**
   * Filter which MedicalHistory to delete.
   */
  where: Prisma.MedicalHistoryWhereUniqueInput
}

/**
 * MedicalHistory deleteMany
 */
export type MedicalHistoryDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which MedicalHistories to delete
   */
  where?: Prisma.MedicalHistoryWhereInput
  /**
   * Limit how many MedicalHistories to delete.
   */
  limit?: number
}

/**
 * MedicalHistory findRaw
 */
export type MedicalHistoryFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * MedicalHistory aggregateRaw
 */
export type MedicalHistoryAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * MedicalHistory without action
 */
export type MedicalHistoryDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicalHistory
   */
  select?: Prisma.MedicalHistorySelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicalHistory
   */
  omit?: Prisma.MedicalHistoryOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicalHistoryInclude<ExtArgs> | null
}
