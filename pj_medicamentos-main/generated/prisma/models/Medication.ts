
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Medication` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Medication
 * 
 */
export type MedicationModel = runtime.Types.Result.DefaultSelection<Prisma.$MedicationPayload>

export type AggregateMedication = {
  _count: MedicationCountAggregateOutputType | null
  _min: MedicationMinAggregateOutputType | null
  _max: MedicationMaxAggregateOutputType | null
}

export type MedicationMinAggregateOutputType = {
  id: string | null
  name: string | null
  dosage: string | null
  instructions: string | null
  createdAt: Date | null
  userId: string | null
}

export type MedicationMaxAggregateOutputType = {
  id: string | null
  name: string | null
  dosage: string | null
  instructions: string | null
  createdAt: Date | null
  userId: string | null
}

export type MedicationCountAggregateOutputType = {
  id: number
  name: number
  dosage: number
  instructions: number
  createdAt: number
  userId: number
  _all: number
}


export type MedicationMinAggregateInputType = {
  id?: true
  name?: true
  dosage?: true
  instructions?: true
  createdAt?: true
  userId?: true
}

export type MedicationMaxAggregateInputType = {
  id?: true
  name?: true
  dosage?: true
  instructions?: true
  createdAt?: true
  userId?: true
}

export type MedicationCountAggregateInputType = {
  id?: true
  name?: true
  dosage?: true
  instructions?: true
  createdAt?: true
  userId?: true
  _all?: true
}

export type MedicationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Medication to aggregate.
   */
  where?: Prisma.MedicationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Medications to fetch.
   */
  orderBy?: Prisma.MedicationOrderByWithRelationInput | Prisma.MedicationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.MedicationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Medications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Medications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Medications
  **/
  _count?: true | MedicationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: MedicationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: MedicationMaxAggregateInputType
}

export type GetMedicationAggregateType<T extends MedicationAggregateArgs> = {
      [P in keyof T & keyof AggregateMedication]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateMedication[P]>
    : Prisma.GetScalarType<T[P], AggregateMedication[P]>
}




export type MedicationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MedicationWhereInput
  orderBy?: Prisma.MedicationOrderByWithAggregationInput | Prisma.MedicationOrderByWithAggregationInput[]
  by: Prisma.MedicationScalarFieldEnum[] | Prisma.MedicationScalarFieldEnum
  having?: Prisma.MedicationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: MedicationCountAggregateInputType | true
  _min?: MedicationMinAggregateInputType
  _max?: MedicationMaxAggregateInputType
}

export type MedicationGroupByOutputType = {
  id: string
  name: string
  dosage: string
  instructions: string
  createdAt: Date
  userId: string
  _count: MedicationCountAggregateOutputType | null
  _min: MedicationMinAggregateOutputType | null
  _max: MedicationMaxAggregateOutputType | null
}

type GetMedicationGroupByPayload<T extends MedicationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<MedicationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof MedicationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], MedicationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], MedicationGroupByOutputType[P]>
      }
    >
  >



export type MedicationWhereInput = {
  AND?: Prisma.MedicationWhereInput | Prisma.MedicationWhereInput[]
  OR?: Prisma.MedicationWhereInput[]
  NOT?: Prisma.MedicationWhereInput | Prisma.MedicationWhereInput[]
  id?: Prisma.StringFilter<"Medication"> | string
  name?: Prisma.StringFilter<"Medication"> | string
  dosage?: Prisma.StringFilter<"Medication"> | string
  instructions?: Prisma.StringFilter<"Medication"> | string
  createdAt?: Prisma.DateTimeFilter<"Medication"> | Date | string
  userId?: Prisma.StringFilter<"Medication"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  schedules?: Prisma.MedicationScheduleListRelationFilter
}

export type MedicationOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  dosage?: Prisma.SortOrder
  instructions?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  schedules?: Prisma.MedicationScheduleOrderByRelationAggregateInput
}

export type MedicationWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.MedicationWhereInput | Prisma.MedicationWhereInput[]
  OR?: Prisma.MedicationWhereInput[]
  NOT?: Prisma.MedicationWhereInput | Prisma.MedicationWhereInput[]
  name?: Prisma.StringFilter<"Medication"> | string
  dosage?: Prisma.StringFilter<"Medication"> | string
  instructions?: Prisma.StringFilter<"Medication"> | string
  createdAt?: Prisma.DateTimeFilter<"Medication"> | Date | string
  userId?: Prisma.StringFilter<"Medication"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  schedules?: Prisma.MedicationScheduleListRelationFilter
}, "id">

export type MedicationOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  dosage?: Prisma.SortOrder
  instructions?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  _count?: Prisma.MedicationCountOrderByAggregateInput
  _max?: Prisma.MedicationMaxOrderByAggregateInput
  _min?: Prisma.MedicationMinOrderByAggregateInput
}

export type MedicationScalarWhereWithAggregatesInput = {
  AND?: Prisma.MedicationScalarWhereWithAggregatesInput | Prisma.MedicationScalarWhereWithAggregatesInput[]
  OR?: Prisma.MedicationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.MedicationScalarWhereWithAggregatesInput | Prisma.MedicationScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Medication"> | string
  name?: Prisma.StringWithAggregatesFilter<"Medication"> | string
  dosage?: Prisma.StringWithAggregatesFilter<"Medication"> | string
  instructions?: Prisma.StringWithAggregatesFilter<"Medication"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Medication"> | Date | string
  userId?: Prisma.StringWithAggregatesFilter<"Medication"> | string
}

export type MedicationCreateInput = {
  id?: string
  name: string
  dosage: string
  instructions: string
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutMedicationsInput
  schedules?: Prisma.MedicationScheduleCreateNestedManyWithoutMedicationInput
}

export type MedicationUncheckedCreateInput = {
  id?: string
  name: string
  dosage: string
  instructions: string
  createdAt?: Date | string
  userId: string
  schedules?: Prisma.MedicationScheduleUncheckedCreateNestedManyWithoutMedicationInput
}

export type MedicationUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  dosage?: Prisma.StringFieldUpdateOperationsInput | string
  instructions?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutMedicationsNestedInput
  schedules?: Prisma.MedicationScheduleUpdateManyWithoutMedicationNestedInput
}

export type MedicationUncheckedUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  dosage?: Prisma.StringFieldUpdateOperationsInput | string
  instructions?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  schedules?: Prisma.MedicationScheduleUncheckedUpdateManyWithoutMedicationNestedInput
}

export type MedicationCreateManyInput = {
  id?: string
  name: string
  dosage: string
  instructions: string
  createdAt?: Date | string
  userId: string
}

export type MedicationUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  dosage?: Prisma.StringFieldUpdateOperationsInput | string
  instructions?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type MedicationUncheckedUpdateManyInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  dosage?: Prisma.StringFieldUpdateOperationsInput | string
  instructions?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MedicationListRelationFilter = {
  every?: Prisma.MedicationWhereInput
  some?: Prisma.MedicationWhereInput
  none?: Prisma.MedicationWhereInput
}

export type MedicationOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type MedicationCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  dosage?: Prisma.SortOrder
  instructions?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type MedicationMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  dosage?: Prisma.SortOrder
  instructions?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type MedicationMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  dosage?: Prisma.SortOrder
  instructions?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type MedicationScalarRelationFilter = {
  is?: Prisma.MedicationWhereInput
  isNot?: Prisma.MedicationWhereInput
}

export type MedicationCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MedicationCreateWithoutUserInput, Prisma.MedicationUncheckedCreateWithoutUserInput> | Prisma.MedicationCreateWithoutUserInput[] | Prisma.MedicationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MedicationCreateOrConnectWithoutUserInput | Prisma.MedicationCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MedicationCreateManyUserInputEnvelope
  connect?: Prisma.MedicationWhereUniqueInput | Prisma.MedicationWhereUniqueInput[]
}

export type MedicationUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.MedicationCreateWithoutUserInput, Prisma.MedicationUncheckedCreateWithoutUserInput> | Prisma.MedicationCreateWithoutUserInput[] | Prisma.MedicationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MedicationCreateOrConnectWithoutUserInput | Prisma.MedicationCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.MedicationCreateManyUserInputEnvelope
  connect?: Prisma.MedicationWhereUniqueInput | Prisma.MedicationWhereUniqueInput[]
}

export type MedicationUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MedicationCreateWithoutUserInput, Prisma.MedicationUncheckedCreateWithoutUserInput> | Prisma.MedicationCreateWithoutUserInput[] | Prisma.MedicationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MedicationCreateOrConnectWithoutUserInput | Prisma.MedicationCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MedicationUpsertWithWhereUniqueWithoutUserInput | Prisma.MedicationUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MedicationCreateManyUserInputEnvelope
  set?: Prisma.MedicationWhereUniqueInput | Prisma.MedicationWhereUniqueInput[]
  disconnect?: Prisma.MedicationWhereUniqueInput | Prisma.MedicationWhereUniqueInput[]
  delete?: Prisma.MedicationWhereUniqueInput | Prisma.MedicationWhereUniqueInput[]
  connect?: Prisma.MedicationWhereUniqueInput | Prisma.MedicationWhereUniqueInput[]
  update?: Prisma.MedicationUpdateWithWhereUniqueWithoutUserInput | Prisma.MedicationUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MedicationUpdateManyWithWhereWithoutUserInput | Prisma.MedicationUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MedicationScalarWhereInput | Prisma.MedicationScalarWhereInput[]
}

export type MedicationUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.MedicationCreateWithoutUserInput, Prisma.MedicationUncheckedCreateWithoutUserInput> | Prisma.MedicationCreateWithoutUserInput[] | Prisma.MedicationUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.MedicationCreateOrConnectWithoutUserInput | Prisma.MedicationCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.MedicationUpsertWithWhereUniqueWithoutUserInput | Prisma.MedicationUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.MedicationCreateManyUserInputEnvelope
  set?: Prisma.MedicationWhereUniqueInput | Prisma.MedicationWhereUniqueInput[]
  disconnect?: Prisma.MedicationWhereUniqueInput | Prisma.MedicationWhereUniqueInput[]
  delete?: Prisma.MedicationWhereUniqueInput | Prisma.MedicationWhereUniqueInput[]
  connect?: Prisma.MedicationWhereUniqueInput | Prisma.MedicationWhereUniqueInput[]
  update?: Prisma.MedicationUpdateWithWhereUniqueWithoutUserInput | Prisma.MedicationUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.MedicationUpdateManyWithWhereWithoutUserInput | Prisma.MedicationUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.MedicationScalarWhereInput | Prisma.MedicationScalarWhereInput[]
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type MedicationCreateNestedOneWithoutSchedulesInput = {
  create?: Prisma.XOR<Prisma.MedicationCreateWithoutSchedulesInput, Prisma.MedicationUncheckedCreateWithoutSchedulesInput>
  connectOrCreate?: Prisma.MedicationCreateOrConnectWithoutSchedulesInput
  connect?: Prisma.MedicationWhereUniqueInput
}

export type MedicationUpdateOneRequiredWithoutSchedulesNestedInput = {
  create?: Prisma.XOR<Prisma.MedicationCreateWithoutSchedulesInput, Prisma.MedicationUncheckedCreateWithoutSchedulesInput>
  connectOrCreate?: Prisma.MedicationCreateOrConnectWithoutSchedulesInput
  upsert?: Prisma.MedicationUpsertWithoutSchedulesInput
  connect?: Prisma.MedicationWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.MedicationUpdateToOneWithWhereWithoutSchedulesInput, Prisma.MedicationUpdateWithoutSchedulesInput>, Prisma.MedicationUncheckedUpdateWithoutSchedulesInput>
}

export type MedicationCreateWithoutUserInput = {
  id?: string
  name: string
  dosage: string
  instructions: string
  createdAt?: Date | string
  schedules?: Prisma.MedicationScheduleCreateNestedManyWithoutMedicationInput
}

export type MedicationUncheckedCreateWithoutUserInput = {
  id?: string
  name: string
  dosage: string
  instructions: string
  createdAt?: Date | string
  schedules?: Prisma.MedicationScheduleUncheckedCreateNestedManyWithoutMedicationInput
}

export type MedicationCreateOrConnectWithoutUserInput = {
  where: Prisma.MedicationWhereUniqueInput
  create: Prisma.XOR<Prisma.MedicationCreateWithoutUserInput, Prisma.MedicationUncheckedCreateWithoutUserInput>
}

export type MedicationCreateManyUserInputEnvelope = {
  data: Prisma.MedicationCreateManyUserInput | Prisma.MedicationCreateManyUserInput[]
}

export type MedicationUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.MedicationWhereUniqueInput
  update: Prisma.XOR<Prisma.MedicationUpdateWithoutUserInput, Prisma.MedicationUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.MedicationCreateWithoutUserInput, Prisma.MedicationUncheckedCreateWithoutUserInput>
}

export type MedicationUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.MedicationWhereUniqueInput
  data: Prisma.XOR<Prisma.MedicationUpdateWithoutUserInput, Prisma.MedicationUncheckedUpdateWithoutUserInput>
}

export type MedicationUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.MedicationScalarWhereInput
  data: Prisma.XOR<Prisma.MedicationUpdateManyMutationInput, Prisma.MedicationUncheckedUpdateManyWithoutUserInput>
}

export type MedicationScalarWhereInput = {
  AND?: Prisma.MedicationScalarWhereInput | Prisma.MedicationScalarWhereInput[]
  OR?: Prisma.MedicationScalarWhereInput[]
  NOT?: Prisma.MedicationScalarWhereInput | Prisma.MedicationScalarWhereInput[]
  id?: Prisma.StringFilter<"Medication"> | string
  name?: Prisma.StringFilter<"Medication"> | string
  dosage?: Prisma.StringFilter<"Medication"> | string
  instructions?: Prisma.StringFilter<"Medication"> | string
  createdAt?: Prisma.DateTimeFilter<"Medication"> | Date | string
  userId?: Prisma.StringFilter<"Medication"> | string
}

export type MedicationCreateWithoutSchedulesInput = {
  id?: string
  name: string
  dosage: string
  instructions: string
  createdAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutMedicationsInput
}

export type MedicationUncheckedCreateWithoutSchedulesInput = {
  id?: string
  name: string
  dosage: string
  instructions: string
  createdAt?: Date | string
  userId: string
}

export type MedicationCreateOrConnectWithoutSchedulesInput = {
  where: Prisma.MedicationWhereUniqueInput
  create: Prisma.XOR<Prisma.MedicationCreateWithoutSchedulesInput, Prisma.MedicationUncheckedCreateWithoutSchedulesInput>
}

export type MedicationUpsertWithoutSchedulesInput = {
  update: Prisma.XOR<Prisma.MedicationUpdateWithoutSchedulesInput, Prisma.MedicationUncheckedUpdateWithoutSchedulesInput>
  create: Prisma.XOR<Prisma.MedicationCreateWithoutSchedulesInput, Prisma.MedicationUncheckedCreateWithoutSchedulesInput>
  where?: Prisma.MedicationWhereInput
}

export type MedicationUpdateToOneWithWhereWithoutSchedulesInput = {
  where?: Prisma.MedicationWhereInput
  data: Prisma.XOR<Prisma.MedicationUpdateWithoutSchedulesInput, Prisma.MedicationUncheckedUpdateWithoutSchedulesInput>
}

export type MedicationUpdateWithoutSchedulesInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  dosage?: Prisma.StringFieldUpdateOperationsInput | string
  instructions?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutMedicationsNestedInput
}

export type MedicationUncheckedUpdateWithoutSchedulesInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  dosage?: Prisma.StringFieldUpdateOperationsInput | string
  instructions?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type MedicationCreateManyUserInput = {
  id?: string
  name: string
  dosage: string
  instructions: string
  createdAt?: Date | string
}

export type MedicationUpdateWithoutUserInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  dosage?: Prisma.StringFieldUpdateOperationsInput | string
  instructions?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  schedules?: Prisma.MedicationScheduleUpdateManyWithoutMedicationNestedInput
}

export type MedicationUncheckedUpdateWithoutUserInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  dosage?: Prisma.StringFieldUpdateOperationsInput | string
  instructions?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  schedules?: Prisma.MedicationScheduleUncheckedUpdateManyWithoutMedicationNestedInput
}

export type MedicationUncheckedUpdateManyWithoutUserInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  dosage?: Prisma.StringFieldUpdateOperationsInput | string
  instructions?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type MedicationCountOutputType
 */

export type MedicationCountOutputType = {
  schedules: number
}

export type MedicationCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  schedules?: boolean | MedicationCountOutputTypeCountSchedulesArgs
}

/**
 * MedicationCountOutputType without action
 */
export type MedicationCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicationCountOutputType
   */
  select?: Prisma.MedicationCountOutputTypeSelect<ExtArgs> | null
}

/**
 * MedicationCountOutputType without action
 */
export type MedicationCountOutputTypeCountSchedulesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.MedicationScheduleWhereInput
}


export type MedicationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  dosage?: boolean
  instructions?: boolean
  createdAt?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  schedules?: boolean | Prisma.Medication$schedulesArgs<ExtArgs>
  _count?: boolean | Prisma.MedicationCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["medication"]>



export type MedicationSelectScalar = {
  id?: boolean
  name?: boolean
  dosage?: boolean
  instructions?: boolean
  createdAt?: boolean
  userId?: boolean
}

export type MedicationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "dosage" | "instructions" | "createdAt" | "userId", ExtArgs["result"]["medication"]>
export type MedicationInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  schedules?: boolean | Prisma.Medication$schedulesArgs<ExtArgs>
  _count?: boolean | Prisma.MedicationCountOutputTypeDefaultArgs<ExtArgs>
}

export type $MedicationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Medication"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    schedules: Prisma.$MedicationSchedulePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    dosage: string
    instructions: string
    createdAt: Date
    userId: string
  }, ExtArgs["result"]["medication"]>
  composites: {}
}

export type MedicationGetPayload<S extends boolean | null | undefined | MedicationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$MedicationPayload, S>

export type MedicationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<MedicationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: MedicationCountAggregateInputType | true
  }

export interface MedicationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Medication'], meta: { name: 'Medication' } }
  /**
   * Find zero or one Medication that matches the filter.
   * @param {MedicationFindUniqueArgs} args - Arguments to find a Medication
   * @example
   * // Get one Medication
   * const medication = await prisma.medication.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends MedicationFindUniqueArgs>(args: Prisma.SelectSubset<T, MedicationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__MedicationClient<runtime.Types.Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Medication that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {MedicationFindUniqueOrThrowArgs} args - Arguments to find a Medication
   * @example
   * // Get one Medication
   * const medication = await prisma.medication.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends MedicationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, MedicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__MedicationClient<runtime.Types.Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Medication that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicationFindFirstArgs} args - Arguments to find a Medication
   * @example
   * // Get one Medication
   * const medication = await prisma.medication.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends MedicationFindFirstArgs>(args?: Prisma.SelectSubset<T, MedicationFindFirstArgs<ExtArgs>>): Prisma.Prisma__MedicationClient<runtime.Types.Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Medication that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicationFindFirstOrThrowArgs} args - Arguments to find a Medication
   * @example
   * // Get one Medication
   * const medication = await prisma.medication.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends MedicationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, MedicationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__MedicationClient<runtime.Types.Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Medications that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Medications
   * const medications = await prisma.medication.findMany()
   * 
   * // Get first 10 Medications
   * const medications = await prisma.medication.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const medicationWithIdOnly = await prisma.medication.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends MedicationFindManyArgs>(args?: Prisma.SelectSubset<T, MedicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Medication.
   * @param {MedicationCreateArgs} args - Arguments to create a Medication.
   * @example
   * // Create one Medication
   * const Medication = await prisma.medication.create({
   *   data: {
   *     // ... data to create a Medication
   *   }
   * })
   * 
   */
  create<T extends MedicationCreateArgs>(args: Prisma.SelectSubset<T, MedicationCreateArgs<ExtArgs>>): Prisma.Prisma__MedicationClient<runtime.Types.Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Medications.
   * @param {MedicationCreateManyArgs} args - Arguments to create many Medications.
   * @example
   * // Create many Medications
   * const medication = await prisma.medication.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends MedicationCreateManyArgs>(args?: Prisma.SelectSubset<T, MedicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Medication.
   * @param {MedicationDeleteArgs} args - Arguments to delete one Medication.
   * @example
   * // Delete one Medication
   * const Medication = await prisma.medication.delete({
   *   where: {
   *     // ... filter to delete one Medication
   *   }
   * })
   * 
   */
  delete<T extends MedicationDeleteArgs>(args: Prisma.SelectSubset<T, MedicationDeleteArgs<ExtArgs>>): Prisma.Prisma__MedicationClient<runtime.Types.Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Medication.
   * @param {MedicationUpdateArgs} args - Arguments to update one Medication.
   * @example
   * // Update one Medication
   * const medication = await prisma.medication.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends MedicationUpdateArgs>(args: Prisma.SelectSubset<T, MedicationUpdateArgs<ExtArgs>>): Prisma.Prisma__MedicationClient<runtime.Types.Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Medications.
   * @param {MedicationDeleteManyArgs} args - Arguments to filter Medications to delete.
   * @example
   * // Delete a few Medications
   * const { count } = await prisma.medication.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends MedicationDeleteManyArgs>(args?: Prisma.SelectSubset<T, MedicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Medications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Medications
   * const medication = await prisma.medication.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends MedicationUpdateManyArgs>(args: Prisma.SelectSubset<T, MedicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Medication.
   * @param {MedicationUpsertArgs} args - Arguments to update or create a Medication.
   * @example
   * // Update or create a Medication
   * const medication = await prisma.medication.upsert({
   *   create: {
   *     // ... data to create a Medication
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Medication we want to update
   *   }
   * })
   */
  upsert<T extends MedicationUpsertArgs>(args: Prisma.SelectSubset<T, MedicationUpsertArgs<ExtArgs>>): Prisma.Prisma__MedicationClient<runtime.Types.Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Medications that matches the filter.
   * @param {MedicationFindRawArgs} args - Select which filters you would like to apply.
   * @example
   * const medication = await prisma.medication.findRaw({
   *   filter: { age: { $gt: 25 } }
   * })
   */
  findRaw(args?: Prisma.MedicationFindRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>

  /**
   * Perform aggregation operations on a Medication.
   * @param {MedicationAggregateRawArgs} args - Select which aggregations you would like to apply.
   * @example
   * const medication = await prisma.medication.aggregateRaw({
   *   pipeline: [
   *     { $match: { status: "registered" } },
   *     { $group: { _id: "$country", total: { $sum: 1 } } }
   *   ]
   * })
   */
  aggregateRaw(args?: Prisma.MedicationAggregateRawArgs): Prisma.PrismaPromise<Prisma.JsonObject>


  /**
   * Count the number of Medications.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicationCountArgs} args - Arguments to filter Medications to count.
   * @example
   * // Count the number of Medications
   * const count = await prisma.medication.count({
   *   where: {
   *     // ... the filter for the Medications we want to count
   *   }
   * })
  **/
  count<T extends MedicationCountArgs>(
    args?: Prisma.Subset<T, MedicationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], MedicationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Medication.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends MedicationAggregateArgs>(args: Prisma.Subset<T, MedicationAggregateArgs>): Prisma.PrismaPromise<GetMedicationAggregateType<T>>

  /**
   * Group by Medication.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {MedicationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends MedicationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: MedicationGroupByArgs['orderBy'] }
      : { orderBy?: MedicationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, MedicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Medication model
 */
readonly fields: MedicationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Medication.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__MedicationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  schedules<T extends Prisma.Medication$schedulesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Medication$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$MedicationSchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Medication model
 */
export interface MedicationFieldRefs {
  readonly id: Prisma.FieldRef<"Medication", 'String'>
  readonly name: Prisma.FieldRef<"Medication", 'String'>
  readonly dosage: Prisma.FieldRef<"Medication", 'String'>
  readonly instructions: Prisma.FieldRef<"Medication", 'String'>
  readonly createdAt: Prisma.FieldRef<"Medication", 'DateTime'>
  readonly userId: Prisma.FieldRef<"Medication", 'String'>
}
    

// Custom InputTypes
/**
 * Medication findUnique
 */
export type MedicationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Medication
   */
  select?: Prisma.MedicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Medication
   */
  omit?: Prisma.MedicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicationInclude<ExtArgs> | null
  /**
   * Filter, which Medication to fetch.
   */
  where: Prisma.MedicationWhereUniqueInput
}

/**
 * Medication findUniqueOrThrow
 */
export type MedicationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Medication
   */
  select?: Prisma.MedicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Medication
   */
  omit?: Prisma.MedicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicationInclude<ExtArgs> | null
  /**
   * Filter, which Medication to fetch.
   */
  where: Prisma.MedicationWhereUniqueInput
}

/**
 * Medication findFirst
 */
export type MedicationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Medication
   */
  select?: Prisma.MedicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Medication
   */
  omit?: Prisma.MedicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicationInclude<ExtArgs> | null
  /**
   * Filter, which Medication to fetch.
   */
  where?: Prisma.MedicationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Medications to fetch.
   */
  orderBy?: Prisma.MedicationOrderByWithRelationInput | Prisma.MedicationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Medications.
   */
  cursor?: Prisma.MedicationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Medications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Medications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Medications.
   */
  distinct?: Prisma.MedicationScalarFieldEnum | Prisma.MedicationScalarFieldEnum[]
}

/**
 * Medication findFirstOrThrow
 */
export type MedicationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Medication
   */
  select?: Prisma.MedicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Medication
   */
  omit?: Prisma.MedicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicationInclude<ExtArgs> | null
  /**
   * Filter, which Medication to fetch.
   */
  where?: Prisma.MedicationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Medications to fetch.
   */
  orderBy?: Prisma.MedicationOrderByWithRelationInput | Prisma.MedicationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Medications.
   */
  cursor?: Prisma.MedicationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Medications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Medications.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Medications.
   */
  distinct?: Prisma.MedicationScalarFieldEnum | Prisma.MedicationScalarFieldEnum[]
}

/**
 * Medication findMany
 */
export type MedicationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Medication
   */
  select?: Prisma.MedicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Medication
   */
  omit?: Prisma.MedicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicationInclude<ExtArgs> | null
  /**
   * Filter, which Medications to fetch.
   */
  where?: Prisma.MedicationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Medications to fetch.
   */
  orderBy?: Prisma.MedicationOrderByWithRelationInput | Prisma.MedicationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Medications.
   */
  cursor?: Prisma.MedicationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Medications from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Medications.
   */
  skip?: number
  distinct?: Prisma.MedicationScalarFieldEnum | Prisma.MedicationScalarFieldEnum[]
}

/**
 * Medication create
 */
export type MedicationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Medication
   */
  select?: Prisma.MedicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Medication
   */
  omit?: Prisma.MedicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicationInclude<ExtArgs> | null
  /**
   * The data needed to create a Medication.
   */
  data: Prisma.XOR<Prisma.MedicationCreateInput, Prisma.MedicationUncheckedCreateInput>
}

/**
 * Medication createMany
 */
export type MedicationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Medications.
   */
  data: Prisma.MedicationCreateManyInput | Prisma.MedicationCreateManyInput[]
}

/**
 * Medication update
 */
export type MedicationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Medication
   */
  select?: Prisma.MedicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Medication
   */
  omit?: Prisma.MedicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicationInclude<ExtArgs> | null
  /**
   * The data needed to update a Medication.
   */
  data: Prisma.XOR<Prisma.MedicationUpdateInput, Prisma.MedicationUncheckedUpdateInput>
  /**
   * Choose, which Medication to update.
   */
  where: Prisma.MedicationWhereUniqueInput
}

/**
 * Medication updateMany
 */
export type MedicationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Medications.
   */
  data: Prisma.XOR<Prisma.MedicationUpdateManyMutationInput, Prisma.MedicationUncheckedUpdateManyInput>
  /**
   * Filter which Medications to update
   */
  where?: Prisma.MedicationWhereInput
  /**
   * Limit how many Medications to update.
   */
  limit?: number
}

/**
 * Medication upsert
 */
export type MedicationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Medication
   */
  select?: Prisma.MedicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Medication
   */
  omit?: Prisma.MedicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicationInclude<ExtArgs> | null
  /**
   * The filter to search for the Medication to update in case it exists.
   */
  where: Prisma.MedicationWhereUniqueInput
  /**
   * In case the Medication found by the `where` argument doesn't exist, create a new Medication with this data.
   */
  create: Prisma.XOR<Prisma.MedicationCreateInput, Prisma.MedicationUncheckedCreateInput>
  /**
   * In case the Medication was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.MedicationUpdateInput, Prisma.MedicationUncheckedUpdateInput>
}

/**
 * Medication delete
 */
export type MedicationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Medication
   */
  select?: Prisma.MedicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Medication
   */
  omit?: Prisma.MedicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicationInclude<ExtArgs> | null
  /**
   * Filter which Medication to delete.
   */
  where: Prisma.MedicationWhereUniqueInput
}

/**
 * Medication deleteMany
 */
export type MedicationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Medications to delete
   */
  where?: Prisma.MedicationWhereInput
  /**
   * Limit how many Medications to delete.
   */
  limit?: number
}

/**
 * Medication findRaw
 */
export type MedicationFindRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
   */
  filter?: runtime.InputJsonValue
  /**
   * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Medication aggregateRaw
 */
export type MedicationAggregateRawArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
   */
  pipeline?: runtime.InputJsonValue[]
  /**
   * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
   */
  options?: runtime.InputJsonValue
}

/**
 * Medication.schedules
 */
export type Medication$schedulesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the MedicationSchedule
   */
  select?: Prisma.MedicationScheduleSelect<ExtArgs> | null
  /**
   * Omit specific fields from the MedicationSchedule
   */
  omit?: Prisma.MedicationScheduleOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicationScheduleInclude<ExtArgs> | null
  where?: Prisma.MedicationScheduleWhereInput
  orderBy?: Prisma.MedicationScheduleOrderByWithRelationInput | Prisma.MedicationScheduleOrderByWithRelationInput[]
  cursor?: Prisma.MedicationScheduleWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.MedicationScheduleScalarFieldEnum | Prisma.MedicationScheduleScalarFieldEnum[]
}

/**
 * Medication without action
 */
export type MedicationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Medication
   */
  select?: Prisma.MedicationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Medication
   */
  omit?: Prisma.MedicationOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.MedicationInclude<ExtArgs> | null
}
